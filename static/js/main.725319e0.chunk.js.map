{"version":3,"sources":["hooks-reducer/stateReducer.js","hooks-reducer/actionTypes.js","covid-provider.js","components/countries.js","components/globalResult.js","components/topAffectedCountries.js","api/api_trigger.js","api/params.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["initialState","global","countries","highlyAffectedCountries","showSidebar","reducer","state","action","type","payload","ReduxStateContext","React","createContext","ReduxDispatchContext","useStateContext","context","useContext","undefined","Error","CovidProvider","children","useReducer","dispatch","Provider","value","Countries","useState","allCountry","setAllCountry","showSearch","setShowSearch","textInput","useRef","useEffect","search","current","filter","country","Country","toLowerCase","clear","LoadComponent","className","window","screen","width","placeholder","ref","aria-label","aria-describedby","onClick","id","map","idx","key","TotalConfirmed","GlobalResult","result","Object","keys","data","push","options","title","text","series","name","innerSize","highcharts","Highcharts","TopAffectedCountires","role","TotalRecovered","TotalDeaths","param","a","fetch","response","json","Main","useDispatchContext","getApiCall","then","populationData","console","log","Global","Date","sort","b","slice","catch","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.725319e0.chunk.js","sourcesContent":["import {ALL_COUNTRIES, WROST_COUNTRIES, GLOBALLY_AFFECTED, SIDEBAR} from './actionTypes'\r\n\r\nexport const initialState = {\r\n    global: {},\r\n    countries: [],\r\n    highlyAffectedCountries: [],\r\n    showSidebar: false\r\n};\r\n\r\nexport const reducer = (state, action) => {\r\n    const {type, payload} = action;\r\n    switch(type){\r\n        case ALL_COUNTRIES: \r\n           return {...state, countries: payload}\r\n        \r\n        case WROST_COUNTRIES:\r\n            return {...state, highlyAffectedCountries: payload}\r\n        \r\n        case GLOBALLY_AFFECTED:\r\n            return {...state, global: payload}\r\n        \r\n        case SIDEBAR:\r\n            return {...state, showSidebar: payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","export const ALL_COUNTRIES = 'ALL_COUNTRIES'; \r\nexport const WROST_COUNTRIES= 'WROST_COUNTRIES';\r\nexport const GLOBALLY_AFFECTED = 'GLOBALLY_AFFECTED';\r\nexport const SIDEBAR = 'SIDEBAR';","import React,{useReducer} from 'react';\r\nimport { reducer, initialState } from \"./hooks-reducer/stateReducer\";\r\n\r\nconst ReduxStateContext = React.createContext(null)\r\nconst ReduxDispatchContext = React.createContext(null);\r\n\r\nfunction useStateContext(){\r\n    const context = React.useContext(ReduxStateContext);\r\n    if(context === undefined){\r\n        throw new Error('Redux State Context is not availabel')\r\n    }\r\n    return context;\r\n}\r\n\r\nfunction useDispatchContext(){\r\n    const context = React.useContext(ReduxDispatchContext);\r\n    if(context === undefined){\r\n        throw new Error('Redux Dispatch Context is not availabel')\r\n    }\r\n    return context;\r\n}\r\n\r\nfunction CovidProvider({children}) {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    return (\r\n        <ReduxStateContext.Provider value={state}>\r\n            <ReduxDispatchContext.Provider value={dispatch}>\r\n                {children}\r\n            </ReduxDispatchContext.Provider>\r\n      </ReduxStateContext.Provider>\r\n    )\r\n  }\r\n\r\n\r\nexport {ReduxDispatchContext, ReduxStateContext, useStateContext, useDispatchContext, CovidProvider }","import React, {useState, useEffect, useRef} from 'react';\r\nimport {useStateContext, useDispatchContext} from '../covid-provider'\r\n\r\nconst Countries = () =>{ \r\n    let {countries, showSidebar} = useStateContext();    \r\n    const [allCountry, setAllCountry] = useState([]);\r\n    const [showSearch, setShowSearch] = useState(true);\r\n    const textInput = useRef(null);\r\n    \r\n\r\n    useEffect(() => {\r\n        setAllCountry(countries);\r\n      }, [countries]);\r\n\r\n\r\n    const search = () => {\r\n        let value = textInput.current.value\r\n        if(value){\r\n            setShowSearch(false);             \r\n            setAllCountry(countries.filter(country => country.Country.toLowerCase() === value.toLowerCase()));\r\n        }       \r\n    }\r\n\r\n    const clear = () => {    \r\n        setAllCountry(countries)   \r\n        setShowSearch(true);\r\n    }\r\n\r\n    const LoadComponent = () => {\r\n        return (      \r\n            <nav className={`bg-light sidebar ${window.screen.width > 768 ? 'col-md-3' : 'full-width-sidebar'}`}>\r\n                <div className=\"input-group input-search-box\">\r\n                    <input type=\"text\" \r\n                        className=\"form-control\" \r\n                        placeholder=\"Search By Country Name\"\r\n                        ref={textInput}\r\n                        aria-label=\"Username\" \r\n                        aria-describedby=\"basic-addon1\"\r\n                        />\r\n                    <div className=\"input-group-prepend\">\r\n                        {\r\n                            showSearch ? <span className=\"input-group-text cp\" onClick={search} id=\"basic-addon1\">Search</span>\r\n                            : <span className=\"input-group-text cp\" id=\"basic-addon1\" onClick={clear}>Clear</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"sidebar-sticky\">            \r\n                        {\r\n                            allCountry.map((country, idx)=>{\r\n                                return(\r\n                                    <div className=\"country\" key={idx}>                                   \r\n                                        <div className=\"country-name\">         \r\n                                            {country.Country} \r\n                                        </div>\r\n                                        <div className=\"total-confirmed\">         \r\n                                            Confirmed Case - {country.TotalConfirmed} \r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    \r\n                </div>\r\n          </nav>)\r\n    }\r\n\r\n    return(\r\n        <>\r\n        { showSidebar ?  <LoadComponent/> : ( window.screen.width > 768 ? <LoadComponent/> : null)}\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Countries","import React from 'react';\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {useStateContext} from '../covid-provider'\r\n\r\nconst GlobalResult = () => {\r\n    const {global} = useStateContext();\r\n    let result = [];\r\n    Object.keys(global).map((data) => result.push([data, global[data]]));\r\n\r\n    const options = {\r\n        title: {\r\n          text: 'Globally Affected'\r\n        },\r\n        series: [{\r\n            type: 'pie',\r\n            name: 'Number of People',\r\n            innerSize: '50%',\r\n            data: result\r\n        }]\r\n      }\r\n       \r\n    return(\r\n        <div>\r\n            <HighchartsReact\r\n                highcharts={Highcharts}\r\n                options={options}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GlobalResult","import React,{useEffect, useState} from \"react\";\r\nimport GlobalResult from \"./globalResult\";\r\nimport {useStateContext} from '../covid-provider'\r\n\r\n\r\nconst TopAffectedCountires = () => {\r\n    const {highlyAffectedCountries} = useStateContext();\r\n \r\n    \r\n    return (\r\n        <main role=\"main\" className={`ml-sm-auto ${ window.screen.width <= 768 ? 'col-md-12' : 'col-md-9' }`}>\r\n            <GlobalResult/>\r\n            <h5 className=\"top-country-list\">Highly Affected Countries</h5>\r\n            <div className=\"row highly-affected\">\r\n            {\r\n                highlyAffectedCountries.map((country, idx)=>{\r\n                    return(\r\n                        <div className=\"col-sm-4\" key={idx}>\r\n                            <div className=\"card card-data mb-2\">\r\n                                <div>\r\n                                    <h5 className=\"card-title text-center m-2 country-title\">{country.Country}</h5>\r\n                                    <div className=\"card-text text-center confirmed\">\r\n                                        <h5 className=\"cases\">Confirmed - {country.TotalConfirmed}</h5>                                    \r\n                                    </div>\r\n                                    <div className=\"card-text text-center recover\">\r\n                                        <h5 className=\"cases\">Recovered - {country.TotalRecovered}</h5>                                    \r\n                                    </div>\r\n                                    <div className=\"card-text text-center death\">\r\n                                        <h5 className=\"cases\">Death - {country.TotalDeaths}</h5>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            \r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default TopAffectedCountires;\r\n","import {ROOT_API} from './params'\r\n\r\n export default async (param) =>{\r\n    const response = await fetch(`${ROOT_API}${param}`)       \r\n    return response.json();\r\n}\r\n\r\n\r\n","export const ROOT_API = 'https://api.covid19api.com/';","import React, {useState, useEffect} from \"react\";\r\nimport Countries from \"./countries\";\r\nimport TopAffectedCountires from \"./topAffectedCountries\";\r\nimport getApiCall from '../api/api_trigger';\r\nimport { ALL_COUNTRIES, WROST_COUNTRIES, GLOBALLY_AFFECTED, SIDEBAR } from \"../hooks-reducer/actionTypes\";\r\nimport Country from '../json/countryData';\r\nimport GlobalData from '../json/globalData';\r\nimport {useDispatchContext, useStateContext} from '../covid-provider'\r\n\r\nconst Main = () => {\r\n    const dispatch = useDispatchContext();\r\n    const {showSidebar} = useStateContext();\r\n\r\n    // const [countries, setCountries] = useState([])\r\n    useEffect(() => {\r\n        getApiCall(\"summary\")\r\n         .then(populationData => {\r\n            console.log(populationData);\r\n            const { Global = {}, Countries = [], Date } = populationData;\r\n            let countries = Countries.sort((a, b) => b.TotalConfirmed - a.TotalConfirmed )\r\n                let global = Global       \r\n            dispatch({type: ALL_COUNTRIES, payload: countries});\r\n               dispatch({type: GLOBALLY_AFFECTED, payload: global})\r\n            dispatch({type: WROST_COUNTRIES, payload: countries.slice(0, 20)}) \r\n          })\r\n          .catch(() =>\r\n            console.log(\"Something is not working, Please retry after some time\")\r\n          );\r\n        \r\n        // // Fake Data - TO Reduce API Call\r\n        // let {Countries} = Country;\r\n        // let {Global} = GlobalData;\r\n        // let global = Global\r\n        // let countries = Countries.sort((a, b) => b.TotalConfirmed - a.TotalConfirmed )  \r\n        // // setCountries(countries) \r\n        // dispatch({type: ALL_COUNTRIES, payload: countries});\r\n        // dispatch({type: WROST_COUNTRIES, payload: countries.slice(0, 20)});\r\n        // dispatch({type: GLOBALLY_AFFECTED, payload: global}); \r\n\r\n      },[dispatch]);\r\n\r\n      const setSidebar = () =>{\r\n        console.log('Main', showSidebar)\r\n        dispatch({type: SIDEBAR, payload: !showSidebar});\r\n      }\r\n\r\n  return (\r\n    <>\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <button className=\"navbar-toggler\" type=\"button\" onClick={setSidebar}>\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <h6 className=\"navbar-header-text col-sm-12 col-md-12 mr-0\">\r\n          Covid-19 Tracker\r\n        </h6>\r\n\r\n      </nav>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <Countries/>\r\n          <TopAffectedCountires/>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main","import React, { useState, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\nimport {CovidProvider} from './covid-provider'\n\nfunction App() { \n  return (\n  <CovidProvider>\n    <Main/>\n  </CovidProvider>\n     \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}